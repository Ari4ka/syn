use anyhow::Result;
use proc_macro2::TokenStream;
use std::fs;
use std::io::Write;
use std::path::Path;

pub fn write<P: AsRef<Path>>(path: P, content: TokenStream) -> Result<()> {
    let mut formatted = Vec::new();
    writeln!(
        formatted,
        "// This file is @generated by syn-internal-codegen."
    )?;
    writeln!(formatted, "// It is not intended for manual editing.")?;
    writeln!(formatted)?;

    let mut config = rustfmt::Config::default();
    config.set().format_macro_matchers(true);
    config.set().normalize_doc_attributes(true);
    config.set().reorder_imports(false);
    config.set().skip_children(true);
    config.set().emit_mode(rustfmt::EmitMode::Stdout);
    config.set().verbose(rustfmt::Verbosity::Quiet);

    let mut session = rustfmt::Session::new(config, Some(&mut formatted));
    let format_report = session.format(rustfmt::Input::Text(content.to_string()))?;
    assert!(!format_report.has_warnings());
    drop(session);

    if path.as_ref().is_file() && fs::read(&path)? == formatted {
        return Ok(());
    }

    fs::write(path, formatted)?;
    Ok(())
}
